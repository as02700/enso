from Base import all

type Expression
    # type Column (origin : Text) (name : Text)
    type Column origin name

    # type Constant (value : Any)
    type Constant value

    # type Operation (kind : Text) (expressions : Vector Expression)
    type Operation kind expressions

type Context
    # type Context (from_spec : FromSpec) (where_filters : Vector Expression)
    #              (orders : Vector (Pair Expression OrderType))
    #              (groups : Vector Expression) (meta_index : Vector Expression)
    type Context from_spec where_filters orders groups meta_index

    set_index : Vector Text -> Context
    set_index new_index =
        Context this.from_spec this.where_filters this.orders this.groups new_index

    set_where_filters : Vector Expression -> Context
    set_where_filters new_filters =
        Context this.from_spec new_filters this.orders this.groups this.meta_index

type FromSpec
    # type FromTable (table_name : Text) (alias : Text)
    type FromTable table_name alias
    # type Join (kind : JoinKind) (left_spec : FromSpec) (right_spec : FromSpec)
    #           (on : Vector Expression)
    type Join kind left_spec right_spec on
    # type SubQuery (expressions : Vector Expression) (context : Context)
    #               (alias : Text)
    type SubQuery expressions context alias

type JoinKind
    type InnerJoin
    type LeftJoin
    type RightJoin
    type CrossJoin

type OrderType
    type Ascending
    type Descending

type Query
    type Select expressions context

make_ctx_from : Text -> Context
make_ctx_from table_name =
    Context (FromTable table_name table_name) [] [] [] []

make_constant : Any -> Expression
make_constant x =
    # TODO [RW] may add some sanitization, like checking if the value type is supported
    Constant x
