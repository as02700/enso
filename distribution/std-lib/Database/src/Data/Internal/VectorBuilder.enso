from Builtins import Array
from Base import all

type VectorBuilder
    type Leaf vec
    type Append left right len

    length : Integer
    length = case this of
        Leaf vec -> vec.length
        Append _ _ len -> len

    is_empty : Boolean
    is_empty = this.length == 0

    build : Vector.Vector Any
    build =
       array = Array.new this.length
       go ix elem = case elem of
           Leaf vec ->
               vec.map_with_index vi-> elem->
                   array.set_at ix+vi elem
               ix + vec.length
           Append l r _ ->
               ix2 = go ix l
               go ix2 r
       go 0 this
       Vector.Vector array

    ++ : VectorBuilder Any | Vector Any -> VectorBuilder Any
    ++ other =
        len = this.length + other.length
        case other of
            Leaf _ -> Append this other len
            Append _ _ _ -> Append this other len
            Vector.Vector _ -> Append this (Leaf other) len

empty : VectorBuilder Any
empty = Leaf []

from_vector : Vector Any -> VectorBuilder Any
from_vector vec = Leaf vec
