from Base import all
import Database.Data.Sql
import Database.Data.Internal.Base_Generator

## INTERNAL
   A SQL dialect.
type Dialect
    # type Dialect (name : Text)
    #              (generate_sql : Query -> Sql.Statement)
    type Dialect name generate_sql

postgresql : Dialect
postgresql =
    starts_with arguments =
        case arguments.length == 2 of
            True ->
                str = arguments.at 0
                sub = arguments.at 1
                res = str ++ (Sql.code " LIKE CONCAT(") ++ sub ++ (Sql.code ", '%')")
                res.paren
            False ->
                Error.throw ("Invalid amount of arguments for operation starts_with")
    ends_with arguments =
        case arguments.length == 2 of
            True ->
                str = arguments.at 0
                sub = arguments.at 1
                res = str ++ (Sql.code " LIKE CONCAT('%', ") ++ sub ++ (Sql.code ")")
                res.paren
            False ->
                Error.throw ("Invalid amount of arguments for operation ends_with")
    contains arguments =
        case arguments.length == 2 of
            True ->
                str = arguments.at 0
                sub = arguments.at 1
                res = str ++ (Sql.code " LIKE CONCAT('%', ") ++ sub ++ (Sql.code ", '%')")
                res.paren
            False ->
                Error.throw ("Invalid amount of arguments for operation contains")
    my_mappings = [["starts_with", starts_with], ["contains", contains], ["ends_with", ends_with]]
    dialect = Base_Generator.base_dialect . extend_with my_mappings
    Dialect "PostgreSql" (query -> Base_Generator.generate_query dialect query . build)

sqlite : Dialect
sqlite =
    starts_with arguments =
        case arguments.length == 2 of
            True ->
                str = arguments.at 0
                sub = arguments.at 1
                res = str ++ (Sql.code " LIKE (") ++ sub ++ (Sql.code " || '%')")
                res.paren
            False ->
                Error.throw ("Invalid amount of arguments for operation starts_with")
    ends_with arguments =
        case arguments.length == 2 of
            True ->
                str = arguments.at 0
                sub = arguments.at 1
                res = str ++ (Sql.code " LIKE ('%' || ") ++ sub ++ (Sql.code ")")
                res.paren
            False ->
                Error.throw ("Invalid amount of arguments for operation ends_with")
    contains arguments =
        case arguments.length == 2 of
            True ->
                str = arguments.at 0
                sub = arguments.at 1
                res = str ++ (Sql.code " LIKE ('%' || ") ++ sub ++ (Sql.code " || '%')")
                res.paren
            False ->
                Error.throw ("Invalid amount of arguments for operation contains")
    my_mappings = [["starts_with", starts_with], ["contains", contains], ["ends_with", ends_with]]
    dialect = Base_Generator.base_dialect . extend_with my_mappings
    Dialect "Sqlite" (query -> Base_Generator.generate_query dialect query . build)
