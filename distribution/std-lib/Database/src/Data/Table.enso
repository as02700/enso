## Represents a column-oriented table data structure backed by a database.
type Table
    type Table java_table

    ## Returns a text containing an ASCII-art table displaying this data.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
         - format_terminal: whether ANSI-terminal formatting should be used
    display : Integer -> Boolean -> Text
    display show_rows=10 format_terminal=False =
        Panic.throw "TODO"

    ## Prints an ASCII-art table with this data to the standard output.

       Arguments:
         - show_rows: the number of initial rows that should be displayed.
    print show_rows=10 =
        IO.println (this.display show_rows format_terminal=True)
        IO.println ''

    ## Converts this table to a JSON structure.
    to_json : Json
    to_json =
        # TODO
        col_jsons = this.columns.map to_json
        cols_json = Json.Array col_jsons
        fields = Map.singleton "columns" cols_json
        Json.Object fields

    ## Returns the column with the given name.
    at : Text -> Column | Nothing
    at name = case this.java_table.getColumnByName [name] of
        Nothing -> Nothing
        c -> Column.Column c

    ## Selects only the rows of this table that correspond to `True` values in
       `indexes`.
       This is useful for filtering the rows by given predicate.
       > Example
         Select only the rows of `my_table` where the `"Status"` column has the
         value `"Valid"`
             my_table.where (my_table.at "Status" == "Valid")
    where : Column -> Table
    where indexes =
        # Table (this.java_table.mask [indexes.java_column])
        # TODO
        Panic.throw "TODO"

    ## Sets the column value at the given name. If a column with the given name
       already exists, it will be replaced. Otherwise a new column is added.
    set : Text -> Column -> Table
    set name column =
        Table (this.java_table.addOrReplaceColumn [column.rename name . java_column])

    ## Returns the vector of columns contained in this table.
    columns : Vector
    columns =
        Vector.Vector (this.java_table.getColumns []) . map Column.Column

    ## Sets the index of this table, using the column with the provided name.
    set_index : Text -> Table
    set_index index =
        Table (this.java_table.indexFromColumn [index])

    ## Selects a subset of columns from this table by name.
    select : Vector -> Table
    select columns = Table (this.java_table.selectColumns [columns.to_array])

    ## Efficiently joins two tables based on either the index or a key column.

       The resulting table contains rows of `this` extended with rows of
       `other` with matching indexes. If the index in `other` is not unique,
       the corresponding rows of `this` will be duplicated in the result.

       Arguments:
         - other: the table being the right operand of this join operation.
         - on: the column of `this` that should be used as the join key. If
               this argument is not provided, the index of `this` will be used.
         - drop_unmatched: whether the rows of `this` without corresponding
                           matches in `other` should be dropped from the result.
         - left_suffix: a suffix that should be added to the columns of `this`
                        when there's a name conflict with a column of `other`.
         - right_suffix: a suffix that should be added to the columns of `other`
                         when there's a name conflict with a column of `this`.
    join : Table -> Text | Nothing -> Boolean -> Text -> Text -> Table
    join other on=Nothing drop_unmatched=False left_suffix='_left' right_suffix='_right' =
        Table (this.java_table.join [other.java_table, drop_unmatched, on, left_suffix, right_suffix])

    ## Returns a new Table without rows that contained missing values in any of
       the columns.
    drop_missing_rows : Table
    drop_missing_rows =
        cols = this.columns
        case cols.not_empty of
            True ->
                any_missing_mask = cols.map is_missing . reduce (||)
                non_missing_mask = any_missing_mask.not
                this.where non_missing_mask
            False -> this

    ## Returns a new Table without columns that contained any missing values.
    drop_missing_columns : Table
    drop_missing_columns =
        non_missing = this.columns . filter (col -> col.count_missing == 0)
        index = this.java_table.getIndex []
        Table (Java_Table.new [non_missing.map java_column . to_array, index].to_array)

    ## Returns the amount of rows in this table.
    nrows : Integer
    nrows = this.java_table.nrows []

    ## Returns a Table describing this table's contents.

       The table lists all columns, counts of non-null items and storage types
       of each column.
    info : Table
    info =
        cols = this.columns
        here.new [["Column", cols.map name], ["Items Count", cols.map count], ["Storage Type", cols.map storage_type]]

