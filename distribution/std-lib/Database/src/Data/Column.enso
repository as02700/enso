from Base import all
import Database.Data.Internal.Helpers
import Database.Data.Internal.IR
import Database.Data.Table

type Column
    # type Column (name : Text) (connection : Connection)
    #             (expression : IR.Expression) (context : IR.Context)
    type Column name connection expression context

    ## Converts this column to JSON.
    to_json : Json
    to_json = Error.throw "TODO"

    ## Converts this column into a single-column table.
    to_table : Table.Table
    to_table =
        cols = [Pair this.name this.expression]
        Table.Table this.connection cols this.context

    ## Returns a vector containing all the elements in this column.
    to_vector : Vector
    to_vector = Error.throw "TODO"

    make_binary_op : Text -> Text -> (Column | Any) -> Column
    make_binary_op op_kind op_name operand =
        case operand of
            Column other_name _ other_expr _ ->
                case Helpers.check_integrity this operand of
                    False ->
                        Error.throw "Cannot compare columns coming from different contexts. Only columns of a single table can be compared."
                    True ->
                        new_expr = IR.Operation op_kind [this.expression, other_expr]
                        new_name = this.name + "_" + op_name + "_" + other_name
                        Column new_name this.connection new_expr this.context
            _ ->
                other = IR.make_constant operand
                new_expr = IR.Operation op_kind [this.expression, other]
                new_name = this.name + "_" + op_name
                Column new_name this.connection new_expr this.context

    make_unary_op : Text -> Text -> Column
    make_unary_op op_kind op_name =
        new_expr = IR.Operation op_kind [this.expression]
        new_name = this.name + "_" + op_name
        Column new_name this.connection new_expr this.context

    ## Element-wise equality comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    == : Column | Any -> Column
    == other = this.make_binary_op "=" "equals" other

    ## Element-wise non-equality comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    != : Column | Any -> Column
    != other = this.make_binary_op "!=" "not_equals" other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    >= : Column | Any -> Column
    >= other = this.make_binary_op ">=" "geq" other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    <= : Column | Any -> Column
    <= other = this.make_binary_op "<=" "leq" other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    > : Column | Any -> Column
    > other = this.make_binary_op ">" "greater" other

    ## Element-wise order comparison. Returns a column with results of
       comparing this column's elements against `other`.
       If `other` is a column, the comparison is performed pairwise between
       corresponding elements of `this` and `other`.
    < : Column | Any -> Column
    < other = this.make_binary_op "<" "less" other

    ## Element-wise addition. Returns a column containing the result
       of adding `other` to each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    + : Column | Any -> Column
    + other = this.make_binary_op "+" "plus" other

    ## Element-wise subtraction. Returns a column containing the result
       of subtracting `other` from each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    - : Column | Any -> Column
    - other = this.make_binary_op "-" "minus" other

    ## Element-wise multiplication. Returns a column containing the result
       of multiplying `other` by each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    * : Column | Any -> Column
    * other = this.make_binary_op "*" "times" other

    ## Element-wise division. Returns a column containing the result
       of dividing each element of `this` by `other`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    / : Column | Any -> Column
    / other = this.make_binary_op "/" "divided" other

    ## Element-wise boolean conjunction. Returns a column containing the result
       of performing the boolean `and` on `other` and each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    && : Column | Any -> Column
    && other = this.make_binary_op "AND" "and" other

    ## Element-wise boolean disjunction. Returns a column containing the result
       of performing the boolean `or` on `other` and each element of `this`.
       If `other` is a column, the operation is performed pairwise between
       corresponding elements of `this` and `other`.
    || : Column | Any -> Column
    || other = this.make_binary_op "OR" "or" other

    ## Boolean negation of each element in this column.
    not : Column
    not = this.make_unary_op "NOT" "not"

    ## Returns a column of booleans, with `True` items at the positions where
       this column contains a `Nothing`.
    is_missing : Column
    is_missing = this.make_unary_op "ISNULL" "isnull"

    ## Returns a new column where missing values have been replaced with the
       provided default.
    fill_missing : Any -> Column
    fill_missing default = this.make_binary_op "FILLNULL" "fillnull" default

    ## Selects only the rows of this column that correspond to `True` values in
       `indexes`.
       This is useful for filtering the rows by given predicate.
       > Example
         Select only the rows of `my_column` where the `status_column` column
         has the value `"Valid"`
             my_column.where (status_column == "Valid")
    where : Column -> Column
    where filter =
        case Helpers.check_integrity this filter of
            False ->
                # TODO [RW] more descriptive errors
                Error.throw "Filtering over a column with differing context."
            True ->
                new_filters = this.context.where_filters + [filter.expression]
                new_ctx = this.context.set_where_filters new_filters
                Column this.name this.connection this.expression new_ctx

    ## Returns a new column without rows that had missing values.
    drop_missing : Any -> Column
    drop_missing = this.where this.is_missing.not

    rename : Text -> Column
    rename new_name =
        # TODO [RW] ensure that the error poisons the result
        Helpers.ensure_name_is_sane new_name
        Column new_name this.connection this.expression this.context

# TODO [RW] starts_with, ends_with, contains
